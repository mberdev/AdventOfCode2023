
namespace ConsoleApp1.InputParse
{

    public class Almanach 
    {
        public List<Range> SeedRanges { get; } = new();
        public Map[] Maps { get; } = new Map[Enum.GetValues(typeof(Section)).Length];

    }

    public class Range
    {
        public long Start { get; }

        public long End => Start + Length - 1;
        public long Length { get; }

        public Range(long start, long length)
        {
            Start = start;
            Length = length;
        }

        public static Range FromStartEnd(long start, long end)
        {
            return new Range(start, end - start + 1);
        }
    }

    public enum Section
    {
        seed = 0,
        soil = 1,
        fertilizer = 2,
        water = 3,
        light = 4,
        temperature = 5,
        humidity = 6,
        location = 7,
    }

    public class SectionsUtil
    {
        // Autogenerated. For mmore flexibility, use Reflexivity.
        public static Section? GetNext(Section section)
        {
            return section switch
            {
                Section.seed => Section.soil,
                Section.soil => Section.fertilizer,
                Section.fertilizer => Section.water,
                Section.water => Section.light,
                Section.light => Section.temperature,
                Section.temperature => Section.humidity,
                Section.humidity => Section.location,
                _ => null,
            };
        }

        public static bool IsLastSection(Section source)
        {
            return (GetNext(source) == null);
        }
    }

    public class Map
    {
        public Section Source { get; }
        public Section Destination { get; }
        public SortedList<long, Conversion> Conversions { get; } = new();

        public Map(Section source, Section destination)
        {
            Source = source;
            Destination = destination;
        }
    }

    public class Conversion
    {
        public Range SourceRange { get; }
        public long Offset { get; }

        // For debug
        public long Start => SourceRange.Start;

        // For debug
        public long End => SourceRange.End;

        public Conversion(Range sourceRange, long offset)
        {
            SourceRange = sourceRange;
            Offset = offset;
        }

        public bool IsInRange(long seed)
        {
            return SourceRange.Start <= seed && seed <= SourceRange.End;
        }
    }
}
